---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by whisper3zzz.
--- DateTime: 2025/4/20 18:59
---
---
--- Scheduler 模块用于管理基于时间和帧的延迟任务。
--- 提供了基于毫秒和帧数的延迟执行功能。
---
local Scheduler = {
    time = 0; -- 当前累计的时间（秒）
    frame = 0; -- 当前累计的帧数
    tasks = {}; -- 存储基于时间的延迟任务
    frameTasks = {}; -- 存储基于帧数的延迟任务
};

---
--- 更新 Scheduler 的状态。
--- 每帧调用此方法以更新时间和帧数，并检查是否有任务需要执行。
---
---@param dt number 每帧的时间间隔（秒）
function Scheduler.update(dt)
    Scheduler.time = Scheduler.time + dt; -- 累加时间
    Scheduler.frame = Scheduler.frame + 1; -- 累加帧数

    -- 遍历并更新基于时间的任务
    for i = #Scheduler.tasks, 1, -1 do
        local task = Scheduler.tasks[i];
        task.remaining = task.remaining - dt * 1000; -- 减少剩余时间（转换为毫秒）
        if (task.remaining <= 0) then
            table.remove(Scheduler.tasks, i); -- 移除已完成的任务
            task.callback(); -- 执行任务回调
        end
    end

    -- 遍历并更新基于帧数的任务
    for i = #Scheduler.frameTasks, 1, -1 do
        local task = Scheduler.frameTasks[i];
        task.frames = task.frames - 1; -- 减少剩余帧数
        if (task.frames <= 0) then
            table.remove(Scheduler.frameTasks, i); -- 移除已完成的任务
            task.callback(); -- 执行任务回调
        end
    end
end

---
--- 添加一个基于时间的延迟任务。
---
---@param ms number 延迟的时间（毫秒）
---@param callback function 延迟完成后执行的回调函数
function Scheduler.delay(ms, callback)
    table.insert(Scheduler.tasks, { remaining = ms, callback = callback }); -- 添加任务到任务列表
end

---
--- 添加一个基于帧数的延迟任务。
---
---@param frames number 延迟的帧数
---@param callback function 延迟完成后执行的回调函数
function Scheduler.delayFrame(frames, callback)
    table.insert(Scheduler.frameTasks, { frames = frames, callback = callback }); -- 添加任务到帧任务列表
end

return Scheduler;